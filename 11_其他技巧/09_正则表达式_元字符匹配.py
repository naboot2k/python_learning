"""
元字符是正则表达式中的特殊字符，用于匹配特定的字符模式。以下是一些常用的元字符及其示例。

1、单字符匹配：
    .匹配任意1个字符（除了\n），其中\.匹配点本身
    [] 匹配[]中列举的字符
    \d 匹配数字0-9
    \D 匹配非数字
    \s 匹配空白，即空格、tab键
    \S 匹配非空白
    \w 匹配单词字符，即a-z、A-Z、0-9、_
    \W 匹配非单词字符

2、数量匹配:
    * 匹配前一个规则的字符出现0次到无数次
    + 匹配前一个规则的字符出现1次到无数次
    ? 匹配前一个规则的字符出现0次或1次
    {m} 匹配前一个规则的字符出现m次
    {m,} 匹配前一个规则的字符出现最少m次
    {m,n} 匹配前一个规则的字符出现m次到n次。注意：中间不要有空格，例如写成{m, n}是错误的。

3、边界匹配
    ^ 匹配字符串开头
    $ 匹配字符串结尾
    \b 匹配一个单词的边界
    \B 匹配非单词边界

4、分组匹配
    | 匹配左右任意一个表达式
    () 将括号中的字符作为一个分组
"""
import re
s = "itheima1 @@AApython2 !!666 ##itccast3"

result = re.findall(r"\d", s)   # 字符串的r标记，表示当前字符串是原始字符串，即内部的转义字符无效而是普通字符。
print(result)

result1 = re.findall(r"\W", s)
print(result1)

result2 = re.findall(r"[a-zA-Z]", s)
print(result2)

# 匹配账号，只能由字母和数字组成，长度限制6到10位
r = "^[0-9a-zA-Z]{6,10}$"
s = "123456aM"
result3 = re.findall(r, s)
print(result3)

# 匹配QQ号，要求纯数字，长度为5-11位，第一位不为0
r = "^[1-9]\d{4,10}$"
s = "12345678901"
result4 = re.findall(r, s)
print(result4)

# 匹配邮箱地址，只允许qq、163、gmail这三种邮箱地址
r = r"(^[\w-]+@(qq|163|gmail)\.com$)"   # 当r中出现分组时，仅输出分组所匹配的内容，可以使用()括起来，就可以输出整个匹配结果。
s = "12345678901@qq.com"
result5 = re.findall(r, s)
result6 = re.match(r, s)
print(result5)
print(result6)
